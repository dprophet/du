{"slots":{"0":{"name":"screen","type":{"events":[],"methods":[]}},"1":{"name":"","type":{"events":[],"methods":[]}},"2":{"name":"","type":{"events":[],"methods":[]}},"3":{"name":"","type":{"events":[],"methods":[]}},"4":{"name":"","type":{"events":[],"methods":[]}},"5":{"name":"core","type":{"events":[],"methods":[]}},"6":{"name":"carbon","type":{"events":[],"methods":[]}},"7":{"name":"iron","type":{"events":[],"methods":[]}},"8":{"name":"silicon","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local bauxite_hub = nil\nlocal coal_hub = nil\nlocal hematite_hub = nil\nlocal quartz_hub = nil\n\nlocal aluminium_hub = nil\nlocal carbon_hub = nil\nlocal iron_hub = nil\nlocal silicon_hub = nil\n\nif gInitialized == true then\n    local bauxite_hub = Container(function() return bauxite.getItemsMass() end, bauxite.getMaxVolume(), 1.28)\n    local coal_hub = Container(function() return coal.getItemsMass() end, coal.getMaxVolume(), 1.35)\n    local hematite_hub = Container(function() return hematite.getItemsMass() end, hematite.getMaxVolume(), 5.04)\n    local quartz_hub = Container(function() return quartz.getItemsMass() end, quartz.getMaxVolume(), 2.65)\n\n    local aluminium_hub = Container(function() return aluminium.getItemsMass() end, aluminium.getMaxVolume(), 2.70)\n    local carbon_hub = Container(function() return carbon.getItemsMass() end, carbon.getMaxVolume(), 2.27)\n    local iron_hub = Container(function() return iron.getItemsMass() end, iron.getMaxVolume(), 7.85)\n    local silicon_hub = Container(function() return silicon.getItemsMass() end, silicon.getMaxVolume(), 2.33)\n\n    system.print(\"bauxite(\" .. bauxite.getElementClass() .. \") volume=\" .. bauxite.getMaxVolume())\n    system.print(\"aluminium volume=\" .. aluminium.getMaxVolume())\n    system.print(\"iron volume=\" .. iron.getMaxVolume())\n\n    myscreen = Screen(function(content) screen.setHTML(content) end)    \nend\n\nunit.setTimer(\"refreshScreen\", 30)\n\nlocal bauxite_hub = Container(function() return bauxite.getItemsMass() end, bauxite.getMaxVolume(), 1.28)\nlocal coal_hub = Container(function() return coal.getItemsMass() end, coal.getMaxVolume(), 1.35)\nlocal hematite_hub = Container(function() return hematite.getItemsMass() end, hematite.getMaxVolume(), 5.04)\nlocal quartz_hub = Container(function() return quartz.getItemsMass() end, quartz.getMaxVolume(), 2.65)\n\nlocal aluminium_hub = Container(function() return aluminium.getItemsMass() end, aluminium.getMaxVolume(), 2.70)\nlocal carbon_hub = Container(function() return carbon.getItemsMass() end, carbon.getMaxVolume(), 2.27)\nlocal iron_hub = Container(function() return iron.getItemsMass() end, iron.getMaxVolume(), 7.85)\nlocal silicon_hub = Container(function() return silicon.getItemsMass() end, silicon.getMaxVolume(), 2.33)\n\nsystem.print(\"bauxite(\" .. bauxite.getElementClass() .. \") volume=\" .. bauxite.getMaxVolume())\nsystem.print(\"aluminium volume=\" .. aluminium.getMaxVolume())\nsystem.print(\"iron volume=\" .. iron.getMaxVolume())\n\nmyscreen = Screen(function(content) screen.setHTML(content) end)\n\nfunction progressBar(hub, withquantity)\n    local quantity = \"\"\n    if withquantity then\n        quantity = \"(\" .. hub.getQuantity() .. \")\"\n    end\n    local progressBar = '<div class=\"progress-bar\"><span class=\"progress-bar-show\" style=\"width:{percent}%;\"></span><span class=\"percent\">{content}% {quantity}</span></div>'\n    return progressBar:gsub(\"{percent}\", hub.getPercentage(true)):gsub(\"{content}\", hub.getPercentage(true)):gsub(\"{quantity}\", quantity)\nend\n\n\nfunction updateScreen()\n    local ores = HTMLTable()\n\n    ores.addRow({\"Bauxite / Aluminium\", progressBar(bauxite_hub, true), progressBar(aluminium_hub), \"\"})\n    ores.addRow({\"Coal / Carbon\", progressBar(coal_hub, true), progressBar(carbon_hub), \"\"})\n    ores.addRow({\"Hematite / Iron\", progressBar(hematite_hub, true), progressBar(iron_hub), \"\"})\n    ores.addRow({\"Quartz / Silicon\", progressBar(quartz_hub, true), progressBar(silicon_hub), \"\"})\n\n    myscreen.update('<div class=\"header\">Tier 1</div>' .. ores.render())\nend\n\nunit.hide()\nupdateScreen()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"updateScreen()","filter":{"args":[{"value":"refreshScreen"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"version = \"v1.3\"\n\nsystem.print(\"unit start that I care about\")\n\ninitializeOreStructure()\n\ncore = getCore()\nscreen = getScreen()\n--bauxite = getNamedElement(\"ItemContainer\", \"bauxite\")\n--aluminium = getNamedElement(\"ItemContainer\", \"aluminium\")\n--coal = getNamedElement(\"ItemContainer\", \"coal\")\n--carbon = getNamedElement(\"ItemContainer\", \"carbon\")\n--hematite = getNamedElement(\"ItemContainer\", \"hematite\")\n--iron = getNamedElement(\"ItemContainer\", \"iron\")\n--quartz = getNamedElement(\"ItemContainer\", \"quartz\")\n--silicon = getNamedElement(\"ItemContainer\", \"silicon\")\n\n\nif core == false then\n\tsystem.logError(\"ERROR: You must link this to the core\")\n     system.print(\"ERROR: You must link this to the core\")\nend\n\nif screen == false then\n\tsystem.logError(\"ERROR: You must link this to the screen\")\n     system.print(\"ERROR: You must link this to the screen\")\nend\n\nif bauxite == false then\n\tsystem.logError(\"ERROR: Cannot find bauxite container\")\n     system.print(\"ERROR: Cannot find bauxite container\")\nend\n\nif aluminium == false then\n\tsystem.logError(\"ERROR: Cannot find aluminium container\")\n     system.print(\"ERROR: Cannot find aluminium container\")\nend\n\nif coal == false then\n\tsystem.logError(\"ERROR: Cannot find coal container\")\n     system.print(\"ERROR: Cannot find coal container\")\nend\n\nif carbon == false then\n\tsystem.logError(\"ERROR: Cannot find carbon container\")\n     system.print(\"ERROR: Cannot find carbon container\")\nend\n\nif hematite == false then\n\tsystem.logError(\"ERROR: Cannot find hematite container\")\n     system.print(\"ERROR: Cannot find hematite container\")\nend\n\nif iron == false then\n\tsystem.logError(\"ERROR: Cannot find iron container\")\n     system.print(\"ERROR: Cannot find iron container\")\nend\n\nif quartz == false then\n\tsystem.logError(\"ERROR: Cannot find quartz container\")\n     system.print(\"ERROR: Cannot find quartz container\")\nend\n\nif silicon == false then\n\tsystem.logError(\"ERROR: Cannot find silicon container\")\n     system.print(\"ERROR: Cannot find silicon container\")\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"2"},{"code":"function formatLitre(value)\n    if value > 1000 then\n        return (math.floor(value / 10) / 100) .. \"kL\"\n    else\n        return value .. \"L\"\n    end\nend\n\nfunction Container(mass, size, density)\n    local self = {\n        density = 0,\n        mass = function() return 0 end,\n        size = 0\n    }\n\n    self.density = density\n    self.mass = mass\n    self.size = size\n\n    function self.getQuantity(asNumber)\n        result = 0\n        if self.density > 0 then\n            result = math.floor(self.mass() / self.density)\n        else\n            system.print(\"You must set a density to the container\")\n        end\n\n        if asNumber then\n            return result\n        end\n        return formatLitre(result)\n    end\n\n    function self.getPercentage(asNumber)\n        if self.size <= 0 then\n            system.print(\"You must set a size to the container\")\n            if asNumber then\n                return 0\n            else\n                return \"0%\"\n            end\n        end\n        local result = math.floor(self.getQuantity(true) / self.getSize() * 100)\n\n        if asNumber then\n            return result\n        else\n            return result .. \"%\"\n        end\n    end\n\n    function self.getSize()\n        return self.size\n    end\n\n    function self.getMass()\n        return self.mass()\n    end\n\n    function self.getDensity()\n        return self.density\n    end\n\n    function self.getData()\n        return {\n            density = self.getDensity(),\n            mass = self.getMass(),\n            size = self.getSize()\n        }\n    end\n\n    return self\nend\n\nfunction HTMLTableCell(data, isHeader, styles)\n    local self = {\n        isHeader = false,\n        data = {},\n        styles = \"\"\n    }\n    self.isHeader = isHeader or false\n    self.styles = styles\n    self.data = data\n\n    function self.render(colspan)\n        tag = \"td\"\n        if self.isHeader then\n            tag = \"th\"\n        end\n        return \"<\" .. tag .. \" colspan=\\\"\" .. colspan .. \"\\\" style=\\\"\" .. self.styles .. \"\\\">\" .. self.data .. \"</\" .. tag .. \">\"\n    end\n\n    return self\nend\n\nfunction HTMLTableRow(data, isHeader, styles)\n    local self = {\n        cells = {},\n        styles = \"\"\n    }\n\n    self.styles = styles or \"\"\n\n    for i=1,#data do\n        table.insert(self.cells, HTMLTableCell(data[i], isHeader, self.styles))\n    end\n\n\n    function self.render(tableCellCount)\n        cellCount = #self.cells\n\n        if cellCount == 0 then\n            return \"\"\n        end\n\n        colspan = math.floor(tableCellCount / cellCount)\n        span = colspan + tableCellCount - (cellCount * colspan)\n        result = \"<tr>\"\n        for i=1,#self.cells do\n            result = result .. self.cells[i].render(span)\n            span = colspan\n        end\n        return result .. \"</tr>\"\n    end\n\n    return self\nend\n\nfunction HTMLTable()\n    local self = {\n        cellCount = 0,\n        rows = {}\n    }\n\n    function self.addRow(data, isHeader, styles)\n        self.rows[#self.rows + 1] = HTMLTableRow(data, isHeader, styles)\n        if self.cellCount < #data then\n            self.cellCount = #data\n        end\n    end\n\n    function self.render()\n        result = \"<table>\"\n        for i=1,#self.rows do\n            result = result .. self.rows[i].render(self.cellCount)\n        end\n        return result .. \"</table>\"\n    end\n\n    return self\nend\n\nfunction Screen(display)\n    local self = {\n        styles = [[\n        body {\n        background: black;\n        color: white;\n        height: 100vh;\n        padding: 20px;\n        width: 100vw;\n    }\n        .header {\n        background: black;\n        color: white;\n        font-size: 8vh;\n        font-weight: 900;\n        margin: 5vh 0;\n        text-align: center;\n    }\n        table {\n        color: white;\n        font-size: 5vh;\n        width: calc(100% - 40px);\n        box-sizing: border-box;\n    }\n        table tr td:nth-of-type(1) {\n        font-size: 0.9em;\n        width: 20%;\n    }\n        table tr td:nth-of-type(2) {\n        width: 60%;\n    }\n        table tr td:nth-of-type(3) {\n        width: 20%;\n    }\n        table tr td {\n        border-bottom: 2px solid white;\n        font-family: verdana;\n        padding: 5px;\n    }\n        table tr:last-child td {\n        border-bottom: none;\n    }\n        table tr.flash {\n        color: black;\n        background: red;\n    }\n        .progress-bar {\n        background-color: black;\n        border: 2px solid white;\n        border-radius: 25px;\n        height: 10vh;\n        padding: 1vh;\n        position: relative;\n        width: 100%;\n    }\n        .percent{\n        font-size: 4vh;\n        left:0;\n        line-height: 10vh;\n        position: absolute;\n        text-align: center;\n        top: 0;\n        width: 100%;\n        z-index:1;\n    }\n        .progress-bar-show {\n        background-color: rgba(0,116,194,0.4);\n        border-radius: 30px;\n        display: block;\n        height: 100%;\n        overflow: hidden;\n        position: relative;\n    }\n        ]],\n        content = \"\",\n        display = function(content) end\n    }\n\n    function self.update(content)\n        self.setContent(content)\n        display(self.getContent())\n    end\n\n    function self.setContent(content)\n        self.content = content\n    end\n\n    function self.appendContent(content)\n        self.content = self.content .. content\n    end\n\n    function self.clear()\n        self.udpate(\"\")\n    end\n\n    function self.getContent()\n        return [[\n        <html>\n        <head>\n        <style>\n        ]]..self.styles..[[\n        </style>\n        </head>\n        <body>\n        <div class=\"screen\">\n        ]]..self.content..[[\n        </div>\n        </body>\n        </html>\n        ]]\n    end    \n\n    return self\nend","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"3"},{"code":"version = \"v1.3\"\ngInitialized = false\n","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"4"},{"code":"OreStructure = {\n    [\"bauxite\"] = {\n        name = \"bauxite\",\n\t\ttype = \"ore\",\n        tier = 1,\n        pure_name = \"aluminium\",\n        density = 1.28\n    },\n    [\"aluminium\"] = {\n        name = \"aluminium\",\n\t\ttype = \"pure\",\n        tier = 1,\n        ore_name = \"bauxite\",\n        density = 2.70\n    },\n\t[\"coal\"] = {\n        name = \"coal\",\n\t\ttype = \"ore\",\n        tier = 1,\n        pure_name = \"carbon\",\n        density = 1.35\n    },\n\t[\"carbon\"] = {\n        name = \"carbon\",\n\t\ttype = \"pure\",\n        tier = 1,\n        ore_name = \"coal\",\n        density = 2.27\n    },\n    [\"hematite\"] = {\n        name = \"hematite\",\n\t\ttype = \"ore\",\n        tier = 1,\n        pure_name = \"iron\",\n        density = 5.04\n    },\n    [\"iron\"] = {\n        name = \"iron\",\n\t\ttype = \"pure\",\n        tier = 1,\n        ore_name = \"hematite\",\n        density = 7.85\n    },\n    [\"quartz\"] = {\n        name = \"quartz\",\n\t\ttype = \"ore\",\n        tier = 1,\n        pure_name = \"silicon\",\n        ensity = 1.35\n    },\n    [\"silicon\"] = {\n        name = \"silicon\",\n\t\ttype = \"pure\",\n        tier = 1,\n        ore_name = \"quartz\",\n        density = 2.33\n    },\n    [\"chromite\"] = {\n        name = \"chromite\",\n\t\ttype = \"ore\",\n        tier = 2,\n        pure_name = \"chromium\",\n        density = 4.54\n    },\n    [\"chromium\"] = {\n        name = \"chromium\",\n\t\ttype = \"pure\",\n        tier = 2,\n        ore_name = \"chromite\",\n        density = 7.19\n    },\n    [\"limestone\"] = {\n        name = \"limestone\",\n\t\ttype = \"ore\",\n        tier = 2,\n        pure_name = \"calcium\",\n        density = 2.71\n    },\n    [\"calcium\"] = {\n        name = \"calcium\",\n\t\ttype = \"pure\",\n        tier = 2,\n        ore_name = \"limestone\",\n        density = 1.55\n    },\n    [\"malachite\"] = {\n        name = \"malachite\",\n\t\ttype = \"ore\",\n        tier = 2,\n        pure_name = \"copper\",\n        density = 4.00\n    },\n    [\"copper\"] = {\n        name = \"copper\",\n\t\ttype = \"pure\",\n        tier = 2,\n        pure_name = \"malachite\",\n        density = 8.96\n    },\n    [\"natron\"] = {\n        name = \"natron\",\n\t\ttype = \"ore\",\n        tier = 2,\n        pure_name = \"sodium\",\n        ore_density = 1.55,\n        pure_density = 0.97\n    },\n    [\"sodium\"] = {\n        name = \"sodium\",\n\t\ttype = \"pure\",\n        tier = 2,\n        ore_name = \"natron\",\n        density = 0.97\n    },\n    [\"acanthite\"] = {\n        name = \"acanthite\",\n\t\ttype = \"ore\",\n        tier = 3,\n        pure_name = \"silver\",\n        density = 7.20\n    },\n    [\"silver\"] = {\n        name = \"silver\",\n\t\ttype = \"pure\",\n        tier = 3,\n        ore_name = \"acanthite\",\n        density = 10.49\n    },\n\t[\"garnierite\"] = {\n        name = \"garnierite\",\n\t\ttype = \"ore\",\n        tier = 3,\n        pure_name = \"nickel\",\n        density = 2.6\n    },\n\t[\"nickel\"] = {\n        name = \"nickel\",\n\t\ttype = \"pure\",\n        tier = 3,\n        pure_name = \"garnierite\",\n        density = 8.91\n    },\n    [\"petalite\"] = {\n        name = \"petalite\",\n\t\ttype = \"ore\",\n        tier = 3,\n        pure_name = \"lithium\",\n        ore_density = 2.41,\n        pure_density = 0.53\n    },\n    [\"lithium\"] = {\n        name = \"lithium\",\n\t\ttype = \"pure\",\n        tier = 3,\n        ore_name = \"petalite\",\n        density = 0.53\n    },\n    [\"pyrite\"] = {\n        name = \"pyrite\",\n\t\ttype = \"ore\",\n        tier = 3,\n        pure_name = \"sodium\",\n        ore_density = 5.01,\n        pure_density = 1.82\n    },\n    [\"sodium\"] = {\n        name = \"sodium\",\n\t\ttype = \"pure\",\n        tier = 3,\n        ore_name = \"pyrite\",\n        density = 1.82\n    },\n\t[\"cobaltite\"] = {\n        name = \"cobaltite\",\n\t\ttype = \"ore\",\n        tier = 4,\n        pure_name = \"cobalt\",\n        density = 6.33\n    },\n\t[\"cobalt\"] = {\n        name = \"cobalt\",\n\t\ttype = \"pure\",\n        tier = 4,\n        ore_name = \"cobaltite\",\n        density = 8.9\n    },\n    [\"gold nuggets\"] = {\n        name = \"gold nuggets\",\n\t\ttype = \"ore\",\n        tier = 4,\n        pure_name = \"gold\",\n        density = 19.3\n    },\n    [\"gold\"] = {\n        name = \"gold nuggets\",\n\t\ttype = \"pure\",\n        tier = 4,\n        ore_name = \"gold nuggets\",\n        density = 19.3\n    },\n\t[\"cryolite\"] = {\n        name = \"cryolite\",\n\t\ttype = \"ore\",\n        tier = 4,\n        pure_name = \"fluorine\",\n        density = 2.95\n    },\n\t[\"fluorine\"] = {\n        name = \"fluorine\",\n\t\ttype = \"pure\",\n        tier = 4,\n        ore_name = \"cryolite\",\n        density = 1.696\n    },\n    [\"kolbeckite\"] = {\n        name = \"kolbeckite\",\n\t\ttype = \"ore\",\n        tier = 4,\n        pure_name = \"scandium\",\n        density = 2.37\n    },\n    [\"scandium\"] = {\n        name = \"scandium\",\n\t\ttype = \"pure\",\n        tier = 4,\n        pure_name = \"kolbeckite\",\n        density = 2.985\n    },\n    [\"columbite\"] = {\n        name = \"columbite\",\n\t\ttype = \"ore\",\n        tier = 5,\n        pure_name = \"niobium\",\n        density = 5.38\n    },\n    [\"niobium\"] = {\n        name = \"niobium\",\n\t\ttype = \"pure\",\n        tier = 5,\n        ore_name = \"columbite\",\n        density = 5.38\n    },\n    [\"illmenite\"] = {\n        name = \"illmenite\",\n\t\ttype = \"ore\",\n        tier = 5,\n        pure_name = \"titanium\",\n        density = 4.55\n    },\n    [\"titanium\"] = {\n        name = \"titanium\",\n\t\ttype = \"pure\",\n        tier = 5,\n        pure_name = \"titanium\",\n        density = 4.51\n    },\n\t[\"rhondite\"] = {\n        name = \"rhondite\",\n\t\ttype = \"ore\",\n        tier = 5,\n        pure_name = \"manganese\",\n        density = 3.76\n    },\n\t[\"manganese\"] = {\n        name = \"manganese\",\n\t\ttype = \"pure\",\n        tier = 5,\n        pure_name = \"manganese\",\n        density = 7.21\n    },\n    [\"vanadinite\"] = {\n        name = \"vanadinite\",\n\t\ttype = \"ore\",\n        tier = 5,\n        pure_name = \"vanadium\",\n        ore_density = 6.95,\n        pure_density = 6.0\n    },\n    [\"vanadium\"] = {\n        name = \"vanadium\",\n\t\ttype = \"pure\",\n        tier = 5,\n        pure_name = \"vanadinite\",\n        density = 6.0\n    }\n}\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"5"},{"code":"gDebug = true --export\ngStructureInitialized = false\n\nfunction getCore()\n    for slot_name, slot in pairs(unit) do\n        if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n            local elementClass = slot.getElementClass():lower()\n            if elementClass:find(\"coreunit\") then\n                system.print(\"getCore: found core\")\n                return slot\n            end\n        end\n    end\n    return false\nend\n\nfunction getScreen()\n    for slot_name, slot in pairs(unit) do\n        if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n            local elementClass = slot.getElementClass():lower()\n            if elementClass == \"screenunit\" then\n                system.print(\"getScreen: found screen\") \n                return slot\n            end\n        end\n    end\n    return false\nend\n\nfunction initializeOreStructure()\n    if gStructureInitialized == true then\n       return\n    end\n    \n    gStructureInitialized = true\n    \n    if gDebug == true then system.print(\"initializeOreStructure: Initializing datastructure\") end\n    \n    elementsIdList = core.getElementIdList()\n    for i,q in pairs(elementsIdList)do\n        local elementName = core.getElementNameById(q):lower()\n        local elementClass = core.getElementTypeById(q):lower()\n        --if string.find(elementClass, \"container\") then system.print(\"initializeOreStructure: elementName=\" .. elementName .. \", elementClass=\" ..elementClass ) end\n--        if gDebug == true then system.print(\"getNamedElement: elementName=\" .. elementName .. \", elementClass=\" ..elementClass ) end\n        if elementClass == \"container\" then\n            --if gDebug == true then system.print(\"initializeOreStructure: Found a ItemContainer, name=\" .. elementName) end\n            if OreStructure[elementName] then\n                if gDebug == true then system.print(\"initializeOreStructure: Yes, this is an ore container. name=\" .. elementName) end\n                OreStructure[elementName].element_id = q\n            end\n        end\n    end\nend\n\nfunction getNamedElement(_class, _name)\n    if gDebug == true then system.print(\"getNamedElement: looking for \" .. _name .. \"(\" .. _class .. \")\") end\n    \n    for slot_name, slot in pairs(unit) do\n        if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n            local elementClass = slot.getElementClass()\n            if gDebug == true then system.print(\"getNamedElement: elementClass=\" .. elementClass) end\n            if elementClass:lower() == _class:lower() then\n                elementID = slot.getId()\n                elementName = core.getElementNameById(elementID)\n                if gDebug == true then system.print(\"getNamedElement: elementName=\" .. elementName .. \", elementID=\" .. elementID) end\n                if elementName:lower() == _name:lower() then\n                    system.print(\"getNamedElement found element. ID=\" .. elementID .. \", elementName=\" .. elementName)\n                    return slot\n                end\n            end\n        end\n    end\n    system.print(\"getNamedElement: ERROR Didnt find \" .. _class .. \", \" .. _name)\n    return false\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"6"}],"methods":[],"events":[]}
